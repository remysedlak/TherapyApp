{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\remys\\\\OneDrive\\\\Desktop\\\\TherapyApp\\\\frontend\\\\src\\\\components\\\\JournalForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JournalForm = () => {\n  _s();\n  const [formData, setFormData] = useState({\n    date: '',\n    content: '',\n    mood_color: '',\n    proper_nutrition: false,\n    proper_hydration: false,\n    hydration_amount: '',\n    proper_exercise: false,\n    exercise_duration: '',\n    exercise_description: '',\n    hours_of_sleep: ''\n  });\n  const [csrfToken, setCsrfToken] = useState('');\n\n  // Fetch CSRF token from the document (the token should be in the page)\n  useEffect(() => {\n    const tokenElement = document.querySelector('[name=\"csrfmiddlewaretoken\"]');\n    if (tokenElement) {\n      setCsrfToken(tokenElement.value); // Set CSRF token from the hidden input\n    } else {\n      console.error('CSRF token not found');\n    }\n  }, []);\n  const handleChange = e => {\n    const {\n      name,\n      value,\n      type,\n      checked\n    } = e.target;\n    setFormData({\n      ...formData,\n      [name]: type === 'checkbox' ? checked : value\n    });\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Check if the CSRF token is available\n    if (!csrfToken) {\n      console.error('CSRF token not found');\n      return;\n    }\n\n    // Submit the form data to the backend\n    try {\n      const response = await fetch('/api/journal/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-CSRFToken': csrfToken // CSRF token in the header\n        },\n        body: JSON.stringify(formData)\n      });\n      if (response.ok) {\n        console.log('Journal entry submitted successfully');\n        resetForm(); // Reset form after successful submission\n      } else {\n        console.error('Error submitting journal entry:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error submitting form:', error);\n    }\n  };\n  const resetForm = () => {\n    setFormData({\n      date: '',\n      content: '',\n      mood_color: '',\n      proper_nutrition: false,\n      proper_hydration: false,\n      hydration_amount: '',\n      proper_exercise: false,\n      exercise_duration: '',\n      exercise_description: '',\n      hours_of_sleep: ''\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"hidden\",\n      name: \"csrfmiddlewaretoken\",\n      value: csrfToken\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        name: \"date\",\n        value: formData.date,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Content:\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n        name: \"content\",\n        value: formData.content,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(JournalForm, \"JCAG8EnuV5R3sMUDDWZ1XabhGio=\");\n_c = JournalForm;\nexport default JournalForm;\nvar _c;\n$RefreshReg$(_c, \"JournalForm\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","JournalForm","_s","formData","setFormData","date","content","mood_color","proper_nutrition","proper_hydration","hydration_amount","proper_exercise","exercise_duration","exercise_description","hours_of_sleep","csrfToken","setCsrfToken","tokenElement","document","querySelector","value","console","error","handleChange","e","name","type","checked","target","handleSubmit","preventDefault","response","fetch","method","headers","body","JSON","stringify","ok","log","resetForm","statusText","onSubmit","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","_c","$RefreshReg$"],"sources":["C:/Users/remys/OneDrive/Desktop/TherapyApp/frontend/src/components/JournalForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst JournalForm = () => {\r\n  const [formData, setFormData] = useState({\r\n    date: '',\r\n    content: '',\r\n    mood_color: '',\r\n    proper_nutrition: false,\r\n    proper_hydration: false,\r\n    hydration_amount: '',\r\n    proper_exercise: false,\r\n    exercise_duration: '',\r\n    exercise_description: '',\r\n    hours_of_sleep: '',\r\n  });\r\n\r\n  const [csrfToken, setCsrfToken] = useState('');\r\n\r\n  // Fetch CSRF token from the document (the token should be in the page)\r\n  useEffect(() => {\r\n    const tokenElement = document.querySelector('[name=\"csrfmiddlewaretoken\"]');\r\n    if (tokenElement) {\r\n      setCsrfToken(tokenElement.value);  // Set CSRF token from the hidden input\r\n    } else {\r\n      console.error('CSRF token not found');\r\n    }\r\n  }, []);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value, type, checked } = e.target;\r\n    setFormData({\r\n      ...formData,\r\n      [name]: type === 'checkbox' ? checked : value,\r\n    });\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Check if the CSRF token is available\r\n    if (!csrfToken) {\r\n      console.error('CSRF token not found');\r\n      return;\r\n    }\r\n\r\n    // Submit the form data to the backend\r\n    try {\r\n      const response = await fetch('/api/journal/', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'X-CSRFToken': csrfToken, // CSRF token in the header\r\n        },\r\n        body: JSON.stringify(formData),\r\n      });\r\n\r\n      if (response.ok) {\r\n        console.log('Journal entry submitted successfully');\r\n        resetForm(); // Reset form after successful submission\r\n      } else {\r\n        console.error('Error submitting journal entry:', response.statusText);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error submitting form:', error);\r\n    }\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setFormData({\r\n      date: '',\r\n      content: '',\r\n      mood_color: '',\r\n      proper_nutrition: false,\r\n      proper_hydration: false,\r\n      hydration_amount: '',\r\n      proper_exercise: false,\r\n      exercise_duration: '',\r\n      exercise_description: '',\r\n      hours_of_sleep: '',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      {/* CSRF Token as a hidden input */}\r\n      <input\r\n        type=\"hidden\"\r\n        name=\"csrfmiddlewaretoken\"\r\n        value={csrfToken}\r\n      />\r\n      \r\n      {/* Other form fields */}\r\n      <label>\r\n        Date:\r\n        <input\r\n          type=\"date\"\r\n          name=\"date\"\r\n          value={formData.date}\r\n          onChange={handleChange}\r\n        />\r\n      </label>\r\n      \r\n      <label>\r\n        Content:\r\n        <textarea\r\n          name=\"content\"\r\n          value={formData.content}\r\n          onChange={handleChange}\r\n        />\r\n      </label>\r\n\r\n      {/* Add other form fields here similarly */}\r\n      \r\n      <button type=\"submit\">Submit</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default JournalForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}